////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
///
/// THIS FILE IS AUTOMATICALLY GENERATED !! DO NOT MODIFY !!
///

#include "../include/umbc/text_utils.h"
#include "mcl_symbols.h"
#include <string.h>
#include <errno.h>

using namespace std;
using namespace metacog::symbols;

symbol_table metacog::symbols::__mcl_global_symtable("global_symtable");

void symbol_table::symbol_def(string name, int val) {
  intmap[name]=val;
  dblmap[name]=(double)val;
}

void symbol_table::symbol_def(string name, double val) {
  intmap[name]=(int)val;
  dblmap[name]=val;
}

string symbol_table::reverse_lookup(string prefix, int value,
				    bool* none, bool* multi) {
  bool nonev=true,multiv=false;
  string rv="";
  for (map<string,int>::iterator mi = intmap.begin();
       mi != intmap.end();
       mi++) {
    if ((mi->second == value) &&
	(strncmp((mi->first).c_str(),prefix.c_str(),prefix.size()) == 0)) {
      if (nonev) {
	rv=mi->first;
	nonev=false;
      }
      else 
	multiv=true;
    }
  }
  if (none) *none=nonev;
  if (multi) *multi=multiv;
  return rv;
}

int symbol_table::symbol_intval(string name,bool* exists) {
  map<string,int>::iterator iter = intmap.find(name);
  if (iter != intmap.end()) {
    *exists = true;
    return iter->second;
  }
  else {
    *exists = false;
    return 0;
  }
}

int symbol_table::symbol_intval(string name) {
  return intmap[name];
}

double symbol_table::symbol_dblval(string name,bool* exists) {
  map<string,double>::iterator iter = dblmap.find(name);
  if (iter != dblmap.end()) {
    *exists = true;
    return iter->second;
  }
  else {
    *exists = false;
    return 0;
  }
}

double symbol_table::symbol_dblval(string name) {
  return dblmap[name];
}

int metacog::symbols::global_symbol_intval(string name,bool* exists) {
  return __mcl_global_symtable.symbol_intval(name,exists);
}

int metacog::symbols::global_symbol_intval(string name) {
  return __mcl_global_symtable.symbol_intval(name);
}

void metacog::symbols::global_symbol_def(string name,int val) {
  __mcl_global_symtable.symbol_def(name,val);
}

double metacog::symbols::global_symbol_dblval(string name,bool* exists) {
  return __mcl_global_symtable.symbol_dblval(name,exists);
}

double metacog::symbols::global_symbol_dblval(string name) {
  return __mcl_global_symtable.symbol_dblval(name);
}

void metacog::symbols::global_symbol_def(string name,double val) {
  __mcl_global_symtable.symbol_def(name,val);
}

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
///
/// SYMTABLE CONTRUCTOR -- GENERATES DEFAULT MCL SYMBOLS...
///

