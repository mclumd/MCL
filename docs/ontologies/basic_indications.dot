digraph indications {
  size="8,10"
  "sensorsCanFail(0.00)" [shape=diamond,color=sienna,fontcolor=sienna];
  "effectorsCanFail(0.00)" [shape=diamond,color=sienna,fontcolor=sienna];
  "actionInPlay(0.00)" [shape=diamond,color=sienna,fontcolor=sienna];
  "hostProp(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "provenance:object(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "provenance:self(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "provenance(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "sc:state(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:control(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:spatial(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:temporal(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:resource(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:reward(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:ambient(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:objectprop(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:message(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:counter(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "sc:unspec(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "observable(0.00)" [shape=ellipse,color=purple,peripheries=2,fontcolor=purple];
  "indication(0.00)" [shape=ellipse,color=purple,peripheries=2,fontcolor=purple];
  "divergence(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "aberration(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "breakout_low(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "breakout_high(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "missed_target(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "short_of_target(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "long_of_target(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "missed_unchanged(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "outOfRange(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "notInSet(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "illegalValue(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "unreachableMCLstate(0.00)" [shape=ellipse,color=sienna,fontcolor=sienna];
  "MCLexplosion(0.00)" [shape=ellipse,color=purple,fontcolor=purple];
  "resourceUnchanged(0.00)" [shape=ellipse,color=purple,peripheries=2,fontcolor=purple];
  "stuck(0.00)" [shape=ellipse,color=purple,peripheries=2,fontcolor=purple];
  "sensorVerifiedBroken(0.00)" [shape=rectangle,style=filled,fillcolor=sienna];
  "sensorVerifiedWorking(0.00)" [shape=rectangle,style=filled,fillcolor=sienna];
  "sensorsCanFail(0.00)" -> "hostProp(0.00)";
  "effectorsCanFail(0.00)" -> "hostProp(0.00)";
  "actionInPlay(0.00)" -> "hostProp(0.00)";
  "provenance:self(0.00)" -> "provenance(0.00)";
  "provenance:object(0.00)" -> "provenance(0.00)";
  "sc:state(0.00)" -> "observable(0.00)";
  "sc:control(0.00)" -> "observable(0.00)";
  "sc:spatial(0.00)" -> "observable(0.00)";
  "sc:temporal(0.00)" -> "observable(0.00)";
  "sc:resource(0.00)" -> "observable(0.00)";
  "sc:reward(0.00)" -> "observable(0.00)";
  "sc:ambient(0.00)" -> "observable(0.00)";
  "sc:objectprop(0.00)" -> "observable(0.00)";
  "sc:message(0.00)" -> "observable(0.00)";
  "sc:counter(0.00)" -> "observable(0.00)";
  "sc:unspec(0.00)" -> "observable(0.00)";
  "provenance(0.00)" -> "indication(0.00)";
  "observable(0.00)" -> "indication(0.00)";
  "divergence(0.00)" -> "indication(0.00)";
  "hostProp(0.00)" -> "indication(0.00)";
  "MCLexplosion(0.00)" -> "indication(0.00)";
  "aberration(0.00)" -> "divergence(0.00)";
  "missed_target(0.00)" -> "divergence(0.00)";
  "illegalValue(0.00)" -> "divergence(0.00)";
  "breakout_low(0.00)" -> "aberration(0.00)";
  "breakout_high(0.00)" -> "aberration(0.00)";
  "missed_unchanged(0.00)" -> "missed_target(0.00)";
  "short_of_target(0.00)" -> "missed_target(0.00)";
  "long_of_target(0.00)" -> "missed_target(0.00)";
  "outOfRange(0.00)" -> "illegalValue(0.00)";
  "notInSet(0.00)" -> "illegalValue(0.00)";
  "unreachableMCLstate(0.00)" -> "MCLexplosion(0.00)";
  "sc:resource(0.00)" -> "resourceUnchanged(0.00)";
  "missed_unchanged(0.00)" -> "resourceUnchanged(0.00)";
  "sc:spatial(0.00)" -> "stuck(0.00)";
  "missed_unchanged(0.00)" -> "stuck(0.00)";
}
